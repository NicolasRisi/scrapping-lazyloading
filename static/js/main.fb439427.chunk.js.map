{"version":3,"sources":["components/Widget.js","utils/index.js","pages/main.js","App.js","serviceWorker.js","index.js"],"names":["Widget","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isReady","count","nextProps","_this2","id","setState","setTimeout","react_default","a","createElement","className","Component","uniqueId","Math","random","toString","slice","Main","arr","Array","apply","map","index","el","objectSpread","lib_default","key","height","offset","components_Widget","App","main_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRA+CeA,cA5Cb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,SAAS,EACTC,MAAO,GALQT,yFASOU,GAAW,IAAAC,EAAAR,KAC/BO,EAAUE,KAAOT,KAAKJ,MAAMa,IAAMT,KAAKJ,MAAMa,IAC/CT,KAAKU,SAAS,CACZL,SAAS,IAGXM,WAAW,WACTH,EAAKE,SAAS,CACZL,SAAS,EACTC,MAAOE,EAAKJ,MAAME,MAAQ,KAE3B,MAEHN,KAAKU,SAAS,CACZL,SAAS,qCAMb,OAAOL,KAAKI,MAAMC,QAChBO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkBf,KAAKJ,MAAMU,OAC3CM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BAAf,eACiBf,KAAKJ,MAAMU,QAIhCM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,qBAtCeC,aCFd,SAASC,IACZ,OAAQC,KAAKC,SAASC,SAAS,IAAM,qBAAqBC,MAAM,EAAG,QCIlDC,cACnB,SAAAA,IAAc,IAAAzB,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsB,GACZzB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwB,GAAAnB,KAAAH,OAEA,IAAMS,EAAKQ,IAHC,OAIZpB,EAAKO,MAAQ,CACXmB,IAAKC,MAAMC,MAAM,KAAMD,MAAM,KAAKE,IAAI,SAACb,EAAGc,GACxC,MAAO,CACLV,SAAUR,MAPJZ,6EAcZ,IAAMY,EAAKQ,IAEXjB,KAAKU,SAAS,CACZa,IAAKvB,KAAKI,MAAMmB,IAAIG,IAAI,SAAAE,GACtB,OAAO9B,OAAA+B,EAAA,EAAA/B,CAAA,GACF8B,EADL,CAEEX,SAAUR,yCAOhB,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACZf,KAAKI,MAAMmB,IAAIG,IAAI,SAACE,EAAID,GACvB,OACEf,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CAAUkB,IAAKJ,EAAOK,OAAQ,IAAKC,OAAQ,EAAE,IAAK,IAChDrB,EAAAC,EAAAC,cAACoB,EAAD,CAAQzB,GAAImB,EAAGX,SAAUX,MAAOqB,EAAQ,gBAlCtBX,mBCOnBmB,MARf,WACE,OACEvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACsB,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fb439427.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Widget extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isReady: true,\n      count: 1\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.id !== this.props.id && this.props.id) {\n      this.setState({\n        isReady: false\n      });\n\n      setTimeout(() => {\n        this.setState({\n          isReady: true,\n          count: this.state.count + 1\n        });\n      }, 500);\n    } else {\n      this.setState({\n        isReady: true\n      });\n    }\n  }\n\n  render() {\n    return this.state.isReady ? (\n      <div className=\"widget\">\n        <span className=\"widget-counter\">{this.props.count}</span>\n          <div className=\"widget-text widget-title\">\n              Scrap Title {this.props.count}\n          </div>\n      </div>\n    ) : (\n      <div className=\"widget loading\">\n        loading...\n      </div>\n    );\n  }\n}\n\nexport default Widget;","export function uniqueId() {\n    return (Math.random().toString(36) + '00000000000000000').slice(2, 10);\n}","import React, { Component } from 'react';\nimport LazyLoad from 'react-lazyload';\nimport Widget from '../components/Widget';\nimport { uniqueId } from '../utils';\n\nexport default class Main extends Component {\n  constructor() {\n    super();\n\n    const id = uniqueId();\n    this.state = {\n      arr: Array.apply(null, Array(30)).map((a, index) => {\n        return {\n          uniqueId: id\n        };\n      })\n    };\n  }\n\n  handleClick() {\n    const id = uniqueId();\n\n    this.setState({\n      arr: this.state.arr.map(el => {\n        return {\n          ...el,\n          uniqueId: id\n        };\n      })\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"widget-list\">\n          {this.state.arr.map((el, index) => {\n            return (\n              <LazyLoad key={index} height={200} offset={[-100, 0]}>\n                <Widget id={el.uniqueId} count={index + 1} />\n              </LazyLoad>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport Main from './pages/main.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}